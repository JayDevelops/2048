//
//  MessagesViewController.swift
//  2048 Battle
//
//  Created by James Jackson on 6/25/17.
//  Copyright Â© 2017 James Jackson. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    // MARK: - Conversation Handling
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // Use this method to configure the extension and restore previously stored state.
        configureChildViewController(for: presentationStyle, with: conversation)
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        // Use this method to trigger UI updates in response to the message.
        guard let conversation = self.activeConversation else { return }
        configureChildViewController(for: presentationStyle, with: conversation)
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
         UserDefaults.standard.removeObject(forKey: "timer")
         UserDefaults.standard.removeObject(forKey: "score")
         UserDefaults.standard.synchronize()
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
        guard let conversation = self.activeConversation else { return }
        configureChildViewController(for: presentationStyle, with: conversation)
    }
}

extension MessagesViewController {
    fileprivate func configureChildViewController(for presentationStyle: MSMessagesAppPresentationStyle, with conversation: MSConversation) {
        //removing the parent view controller which xcode provides for us initially
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
        
        //Adding a new view controller from scratch now!
        var childViewController : UIViewController?
        
        //Adding an enum statement when the game is either compact or full (Check iMessage GamePigeon to know what you're talking about)
        switch presentationStyle {
            case .compact:
                childViewController = createStartGameViewController() //Will pop up a starting message
            case .expanded:
                childViewController = createGameViewController(with: conversation) //When in full screeen, will be the full game
                if let conversationURL = conversation.selectedMessage?.url {
                    if let urlComponents = URLComponents(url: (conversationURL), resolvingAgainstBaseURL: false) {
                        let queryItems = urlComponents.queryItems!
                        if (queryItems.first?.name) == "won" {
                            childViewController = createGameViewController(with: conversation)
                        }
                    }
            }
            case .transcript:
            print("well, this is unecessary")
            @unknown default:
            print("WHyyyy")
            
        }
        addChild(((childViewController ?? nil) ?? nil)!)
        childViewController?.view.frame = view.bounds
        
        //Let's take out the default constraints
        view.addSubview(childViewController!.view)
        childViewController!.view.translatesAutoresizingMaskIntoConstraints = false
        
        //Let's make new constraints, with code and not GUI
        childViewController?.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        childViewController?.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        childViewController?.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        childViewController?.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        childViewController?.didMove(toParent: self)
    }
    
    fileprivate func createStartGameViewController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "StartGameViewController") as? StartGameViewController else {
            fatalError("Cannot instantiate view controller")
        }
        
        controller.onTap = {
            [unowned self] in
            guard self.activeConversation != nil else {fatalError("Expected a conversation")}
            
            /* Starts a new sesson in the messages so we keep the data being sent back and forth
                Not making a new conversation every single time it is sent back and forth */
            let newSession = MSSession()
            
            
            //Make a new layout for the chat bubbles being sent back and forth <->
            let layout = MSMessageTemplateLayout()
            
            //Now, we configure said bubble chat being sent <->
            layout.image = UIImage(named: "Play") //Changes the image on the chat bubble
            layout.caption = "Let's Play 2048 Battles" //Changes the caption text
            
            
            //Now let's prepare to pass the above layout content into an actual bubble message
            let message = MSMessage(session: newSession)
            message.layout = layout //Let's put the layout into the bubble message chat
            message.summaryText = "Sent 2048 message"
            
            //Now, we can pass the message into the actual message bubble
            self.activeConversation?.insert(message, completionHandler: nil)
            
        }
        return controller
    }
    
    fileprivate func createGameViewController(with conversation: MSConversation) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "GameViewController") as? GameViewController else {
            fatalError("Cannot instantiate view controller")
        }
        
        /*Let's talk about the sender participant identifier
           This is a unique string to check who sent the message, and who should be waiting or be playing
           In this code, it is used with senderParticipantIdentifier and an enum (GameStatus) to check the case */
        if let currentMessage = conversation.selectedMessage {
            if currentMessage.senderParticipantIdentifier == conversation.remoteParticipantIdentifiers.first {
                GameStatus.current = .InPlay
            } else {
                GameStatus.current = .Waiting
            }
            
            if let messageURL = currentMessage.url {
                let urlComponents = URLComponents(url: messageURL, resolvingAgainstBaseURL: false)
                let queryItems = urlComponents?.queryItems
                
                for item in queryItems! {
                    if item.name == "score" {
                        controller.opponentScore = Int(item.value!)!
                    }
                }
            }
        }
        
        /*Now, let's pass in the score and it's thanks to a delegate
          ( A delegate simply passes data from one view controller to another )*/
        controller.delegate = self
        
        return controller
    }
    
    fileprivate func createGameOverViewController(with conversation: MSConversation) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "GameOverViewController") as? GameOverViewController else {
            fatalError("Cannot instantiate view controller")
        }
        
        if let currentMessage = conversation.selectedMessage {
            if let messageURL = currentMessage.url {
                let urlComponents = URLComponents(url: messageURL, resolvingAgainstBaseURL: false)
                let queryItems = urlComponents?.queryItems
                
                //Checking who won and who lost, the logic is simple
                switch queryItems?[0].value {
                case "true"?:
                    if queryItems?[1].value == conversation.remoteParticipantIdentifiers.first?.uuidString {
                        controller.resultText = "You Lost"
                    } else {
                        controller.resultText = "You WON!"
                    }
                case "false"?:
                    if queryItems?[1].value == conversation.localParticipantIdentifier.uuidString{
                        controller.resultText = "You WON!"
                    } else {
                        controller.resultText = "You Lost"
                    }
                default:
                    controller.resultText = "You Tied"
                }
            }
        }
        
        controller.onTap = {
            [unowned self] in
            guard let conversation = self.activeConversation else {return}
            let session = MSSession()
            let layout = MSMessageTemplateLayout()
            
            layout.image = UIImage(named: "Play")
            layout.caption = "Let's Play 2048 Battle"
            
            let message = MSMessage(session: session)
            message.layout = layout
            message.summaryText = "Sent 2048 Message"
            conversation.insert(message, completionHandler: nil)
            
            self.dismiss()
        }
        
        return controller
    }
}

extension MessagesViewController: GameViewControllerDelegate {
    public func sendMove(score: Int) {
        
        /* Gets the active conversation, encodes the score into the current session, generates a new image with our score,
            and inserts to the current message chat bubble */
        guard let conversation = self.activeConversation else { return }
        
        let session = conversation.selectedMessage?.session ?? MSSession()
        
        var components = URLComponents()
        components.queryItems = [URLQueryItem(name: "score", value: "\(score)")]
        
        //Prepares the content in order to be sent into a chat bubble, remember there's two steps!!!
        let layout = MSMessageTemplateLayout()
        layout.image = tileWith(score: score)
        layout.caption = "$\(conversation.localParticipantIdentifier.uuidString) scored \(score)"
        layout.subcaption = "Tap to take your turn"
        
        //takes all the above information and passes it into a chat bubble to be sent
        let message = MSMessage(session: session)
        message.layout = layout
        message.url = components.url
        message.summaryText = "Sent 2048 Battle Message"
        conversation.insert(message)
        
        //Now we dismiss the view controller
        dismiss()
    }
    
    public func endGame(score: Int, opponentScore: Int) {
        /* Gets the active conversation, encodes the score into the current session, generates a new image with our score,
         and inserts to the current message chat bubble */
        guard let conversation = self.activeConversation else { return }
        
        let session = conversation.selectedMessage?.session ?? MSSession()
        
        var components = URLComponents()
        components.queryItems = [URLQueryItem(name: "score", value: "\(score)")]
        
        //Prepares the content in order to be sent into a chat bubble, remember there's two steps!!!
        let layout = MSMessageTemplateLayout()
        layout.image = tileWith(score: score)
        
        if score > opponentScore {
            layout.caption = "$\(conversation.localParticipantIdentifier.uuidString) WON!"
            components.queryItems = [URLQueryItem(name: "won", value: "false"), URLQueryItem(name: "winner", value: "\(conversation.localParticipantIdentifier.uuidString)")]
        }   else if (score == opponentScore) {
            layout.caption = "Game Tied"
            components.queryItems = [URLQueryItem(name: "won", value: "tie")]
        }   else    {
            layout.caption = "$\(conversation.remoteParticipantIdentifiers[0].uuidString) WON!"
            components.queryItems = [URLQueryItem(name: "won", value: "true"), URLQueryItem(name: "winner", value: "\(conversation.remoteParticipantIdentifiers[0].uuidString)")]
        }
        layout.subcaption = "Tap to rematch"
        
        //takes all the above information and passes it into a chat bubble to be sent
        let message = MSMessage(session: session)
        message.layout = layout
        message.url = components.url
        message.summaryText = "Sent 2048 Battle Message"
        conversation.insert(message)
        
        //Now we dismiss the view controller
        dismiss()
    }
    
    
    /*Taking an integer to make a score label, adding an image to the message view and holding the data for future use*/
    fileprivate func tileWith(score: Int) -> UIImage {
        let namedImageString = "SendGameImage.png"
        let uMage = UIImage(named: namedImageString)
        
        //Attach the image onto the chat bubble, by creating a new one!
        let imageView = UIImageView(image: uMage)
        self.view.addSubview(imageView)
        self.view.bringSubviewToFront(imageView)
        
        //Now, let's make a label for the image!
        let label = UILabel(frame: CGRect(x : 0, y : 0, width : 850, height : 850))
        label.font = UIFont(name: "ClearSans-Bold", size: 315)
        label.center = imageView.center
        label.textAlignment = .center
        label.textColor = UIColor(hex: 0xFDFDFD)
        label.text = "\(score)"
        
        imageView.addSubview(label)
        
        UIGraphicsBeginImageContext(imageView.bounds.size)
        imageView.layer.render(in: UIGraphicsGetCurrentContext()!)
        
        let img = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        
        return img!
    }
}
